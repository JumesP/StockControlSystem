package Stock.classes.Sales;

import Stock.application.SqliteConnection;
import Stock.classes.All_Products;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import static Stock.application.SqliteConnection.Select;
import static Stock.classes.Misc.Clock.*;
import static Stock.classes.Sales.Transactions.generateTransactionID;

public class Sales {
    static Connection connection;
    static String query;
    static ResultSet resultSet;
    static Statement statement;
    static PreparedStatement preparedStatement;

    static {
        connection = SqliteConnection.Connector();
        if (connection == null) System.exit(1);
    }

    int Sale_ID;
    int Sale_Date;
    int Total_Sale_Profit;
    String Viewable_Sales_Date;
    String Viewable_Total_Profit;
    String Most_Sold_Products;
    String viewableTotalProfit123;

    public Sales(int Sale_ID, int Sale_Date) {
        this.Sale_ID = Sale_ID;
        this.Sale_Date = Sale_Date; // every sunday, generated by the system a week after the last
        this.Total_Sale_Profit = 0;
        this.Viewable_Total_Profit = viewableTotalProfit();
        this.Viewable_Sales_Date = lastDayOfTheWeekToWeekPair(Sale_Date);
        this.Most_Sold_Products = mostSoldProduct();
    }

    public int getSale_ID() {
        return Sale_ID;
    } ;

    public void setSale_ID(int Sale_ID) {
        this.Sale_ID = Sale_ID;
    }

    public int getSale_Date() { return Sale_Date; };

    public void setSale_Date(int Sale_Date) {
        this.Sale_Date = Sale_Date;
    }

    public int getTotal_Sale_Profit() {
        return Total_Sale_Profit;
    };

    public void setTotal_Sale_Profit(int Total_Sale_Profit) {
        this.Total_Sale_Profit = Total_Sale_Profit;
    }

    public String getViewable_Total_Profit() {
        return Viewable_Total_Profit;
    };

    public void setViewable_Total_Profit(String Viewable_Total_Profit) { this.Viewable_Total_Profit = "£ " + Viewable_Total_Profit; }

    public String getViewable_Sales_Date() {
        return Viewable_Sales_Date;
    };

    public void setViewable_Sales_Date(String Viewable_Sales_Date) {
        this.Viewable_Sales_Date = Viewable_Sales_Date;
    }

    public String getMost_Sold_Products() {
        return Most_Sold_Products;
    };

    public void setMost_Sold_Products(String Most_Sold_Products) {
        this.Most_Sold_Products = Most_Sold_Products + " units";
    }

    public String getViewableTotalProfit123() {
        return viewableTotalProfit123;
    }

    public void addSales() {
        // Add sales to database
        List<All_Products> products = All_Products.getAllProducts();
        String highestProfitItem = "";
        int highestProfit = 0;

        for (All_Products product : products) {
            int Transaction_ID = generateTransactionID();
            Transactions transaction = new Transactions(Transaction_ID, this.Sale_ID, product.getProduct_ID(), product.getProduct_Name());
            transaction.addTransaction();
            this.Total_Sale_Profit += transaction.getTotal_Profit();

            if (transaction.getTotal_Profit() > highestProfit) {
                highestProfitItem = product.getProduct_Name();
                highestProfit = transaction.getTotal_Profit();
            }

        }

        this.Viewable_Total_Profit = "£" + this.Total_Sale_Profit;
        this.Most_Sold_Products = highestProfitItem + ": £" + highestProfit;

        query = "INSERT INTO Sales (Sale_ID, Sale_Date, Total_Sale_Profit) VALUES (?, ?, ?)";
        try {
            preparedStatement = connection.prepareStatement(query);
            preparedStatement.setInt(1, this.Sale_ID);
            preparedStatement.setInt(2, this.Sale_Date);
            preparedStatement.setInt(3, this.Total_Sale_Profit);
            preparedStatement.executeUpdate();
            preparedStatement.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public String viewableTotalProfit() {
        query = "SELECT Total_Sale_Profit FROM Sales WHERE Sale_ID = " + this.Sale_ID;
        try (ResultSet results = Select(query)) {
            if (results.next()) {
                return "£" + results.getInt("Total_Sale_Profit");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return "£0";
    }

    public String mostSoldProduct() {
        query = "SELECT * FROM Transactions WHERE Sale_ID = " + this.Sale_ID;
        try (ResultSet results = Select(query)) {
            String highestQuantitem = "";
            int highestQuantSold = 0;
            while (results.next()) {
                if (results.getInt("Product_Quantity_Sold") > highestQuantSold) {
                    highestQuantitem = All_Products.getProductByID(results.getInt("Product_ID")).getProduct_Name();
                    highestQuantSold = results.getInt("Product_Quantity_Sold");
                }
            }
            return highestQuantitem;
        } catch (Exception e) {
            e.printStackTrace();
        }
        return "£0";
    }

    public Sales getSale() {
        query = "SELECT * FROM Sales WHERE Sale_ID = " + this.Sale_ID;
        try (ResultSet results = Select(query)) {
            if (results.next()) {
                return new Sales(results.getInt("Sale_ID"), results.getInt("Sale_Date"));
            }
        } catch (Exception e) {
            e.printStackTrace();
        } return null;
    }



    // STATIC METHODS
    public static int generateSalesID() {
        query = "SELECT COUNT(*) FROM Sales";
        try (ResultSet results = Select(query)) {
            if (results.next()) { return results.getInt(1); }
        } catch (Exception e) {
            e.printStackTrace();
        }; return 0;
    }

    public static int nextSaleDate() {
        query = "SELECT * FROM Sales ORDER BY Sale_Date DESC";
        int date = 0;
        try (ResultSet results = Select(query)) {
            if (results.next()) {
                return getSortableDateInAdjust(results.getInt("Sale_Date"), 7);
            } else {
                return 20240519;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }; return 0;
    };

    public static List<Sales> getAllSales() {
        List<Sales> sales = new ArrayList<>();
        query = "SELECT * FROM Sales";
        try (ResultSet results = Select(query)) {
            while (results.next()) {
                Sales sale = new Sales(results.getInt("Sale_ID"), results.getInt("Sale_Date"));
                sales.add(sale);
            }
            return sales;
        } catch (Exception e) {
            e.printStackTrace();
        } return new ArrayList<>();
    }

    public static List<String> getAllSalesDates() {
        List<String> dates = new ArrayList<>();
        List<Sales> sales = getAllSales();

        if (sales.isEmpty()) { return new ArrayList<>(); }
        for (Sales sale : sales) { dates.add(sale.getViewable_Sales_Date()); }
        return dates;
    }

    public static Sales getSaleByID(int Sale_ID) {
        query = "SELECT * FROM Sales WHERE Sale_ID = " + Sale_ID;
        try (ResultSet results = Select(query)) {
            if (results.next()) {
                return new Sales(results.getInt("Sale_ID"), results.getInt("Sale_Date"));
            }
        } catch (Exception e) {
            e.printStackTrace();
        }; return null;
    }
}
